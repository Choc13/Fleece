[{"uri":"https://github.com/fsprojects/Fleece/comparison-with-json-net.html","title":"comparison-with-json-net","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use\n// it to define helpers that you do not want to show in the documentation.\n#r @\u0022nuget: Newtonsoft.Json\u0022\n#r \u0022nuget: FSharpPlus\u0022\n#r @\u0022../src/Fleece.SystemJson/bin/Release/netstandard2.1/Fleece.SystemJson.dll\u0022\n#r @\u0022../src/Fleece.NewtonsoftJson/bin/Release/netstandard2.1/Fleece.NewtonsoftJson.dll\u0022\n\nopen System\nopen Newtonsoft.Json\nopen FSharpPlus\nopen Fleece.Newtonsoft\nopen Fleece.Newtonsoft.Operators\n\n(**\n## Comparison with Json.Net or Newtonsoft Json\n\nIn order to be compatible with Newtonsoft Json conventions you need to either specify a constructor or have a default constructor with the same name as the public field\n(note the different first letter casing).\n*)\n\ntype User(userName:string , enabled: bool)=\n    member __.UserName = userName\n    member __.Enabled = enabled\nlet userJson=\u0022\u0022\u0022\n{\u0022userName\u0022:\u0022test\u0022,\u0022enabled\u0022:true}\n\u0022\u0022\u0022\nlet user = JsonConvert.DeserializeObject\u003CUser\u003E userJson\n(**\nAnother alternative would be to use CLI-mutable\n*)\n[\u003CCLIMutable\u003E]\ntype UserR ={ UserName:string; Enabled:bool }\n(**\nThis enables Json.Net to deserialize json into your structure but leave the F# code easier to reason about.\n*)\nlet userRecord = JsonConvert.DeserializeObject\u003CUserR\u003E userJson\n(**\n### Controlling polymorphism\n\nThe default approach is to use [serialization binder](https://www.newtonsoft.com/json/help/html/SerializeSerializationBinder.htm). The assumption is that you have an abstract class or an interface that implemented by many different types.\n\nIn order to have a better serialization of union cases you need to implement something as seen in [FsCodec.NewtonsoftJson/UnionConverter](https://github.com/jet/FsCodec/blob/2bdcd60c04588c81caecbea6e5507348c4763fd9/src/FsCodec.NewtonsoftJson/UnionConverter.fs).\n\nSince UnionConverter does not map well to F# concepts you might end up with a similar pattern as seen in Fleece. For instance if you read [Eirik Tsarpalis blog](https://eiriktsarpalis.wordpress.com/2018/10/30/a-contract-pattern-for-schemaless-datastores/).\n\nFleece lets you decode the Json at both a lower and hight level. This allows you also to mix and match with the native Json library (in this case Newtonsoft.Json):\n*)\n[\u003CCLIMutable\u003E]\ntype CarInfo = { Make:string; Model:string; Trim:string}\ntype Vehicle =\n   | Bike\n   | Car       of CarInfo\nwith\n    static member OfJson (json:Linq.JToken) =\n        match json with\n        | JObject o -\u003E\n            monad {\n                match! o .@ \u0022type\u0022 with\n                | \u0022Bike\u0022 -\u003E return Bike\n                | \u0022Car\u0022 -\u003E\n                    // we know that json token is a JObject due to the check above so we can directly cast it:\n                    let jobj : Linq.JObject = downcast json\n                    try\n                        // now we can use the default Newtonsoft Json decoder:\n                        let info = jobj.ToObject\u003CCarInfo\u003E() // NOTE: here we hand over control of the mapping to Newtonsoft.Json\n                        return Car info\n                    with\n                    | e-\u003E return! Decode.Fail.parseError e \u0022Could not parse CarInfo\u0022\n                | x -\u003E return! Uncategorized (sprintf \u0022Unexpected type name %s\u0022 x) |\u003E Error\n            }\n        | x -\u003E Decode.Fail.objExpected x\n(**\nThis pattern is *ugly* but can be useful. Modifying the type CarInfo above will give you runtime exceptions without a clear indication that it\u0027s a broken contract.\n\nOne of the useful things about having a mixed approach as seen above is that you can gradually convert to say Fleece in a large codebase without having to fix everything at once.\n*)\n\n(**\n## Full control over mapping\n\nThe default approach to serialization and deserialization in Fleece let you have a lot of control. You choose exactly how it should work.\n\nIt\u0027s easy to let the structure of your Json be completely independent of the structure of your data. Newtonsoft assumes that what you want follow a lot of conventions.\n\nIf we look at a simple example of the Json not matching the representation (where you would need a custom JsonConverter):\n*)\n\ntype Person = {\n    Name : string * string\n}\nwith\n    static member ToJson (x: Person) =\n        jobj [\n            \u0022firstname\u0022 .= fst x.Name\n            \u0022lastname\u0022 .= snd x.Name\n        ]\n    static member OfJson json =\n        match json with\n        | JObject o -\u003E\n            let firstname = jget o \u0022firstname\u0022\n            let lastname = jget o \u0022lastname\u0022\n            match firstname, lastname with\n            | Decode.Success firstname, Decode.Success lastname -\u003E\n                Decode.Success {\n                    Person.Name = (firstname,lastname)\n                }\n            | x -\u003E Error \u003C| Uncategorized (sprintf \u0022Error parsing person: %A\u0022 x)\n        | x -\u003E Decode.Fail.objExpected x\n\n(**\nIn that sense, having access to functions helps us make what in Newtonsoft is a pain to implement, very easy.\n*)"},{"uri":"https://github.com/fsprojects/Fleece/index.html","title":"Fleece\n","content":"Fleece\n======\n\nFleece is a library intended to help with parsing and crafting specific Json without having to write data transfer objects in order to get the expected\nrepresentation.\n\n### Introduction\n\nYou can get an overview of the important part of the library by reading the following pages:\n\n - [ToJson and OfJson](./to-json-and-of-json.html) are the basic building blocks\n - [Codec](./codec.html) let\u0027s you combine both ToJson and OfJson in one declaration\n - [Combinators](./combinators.html) lets you have more control\n\n### Integration with Web frameworks\n\nIn order to use Fleece mappings in your Web API you might follow one of the below guides:\n\n - [Giraffe](./giraffe.html)\n - [Suave](./suave.html)\n"},{"uri":"https://github.com/fsprojects/Fleece/suave.html","title":"suave","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use\n// it to define helpers that you do not want to show in the documentation.\n#r \u0022nuget: FSharpPlus\u0022\n#r \u0022nuget: System.Json\u0022\n#r \u0022nuget: Suave\u0022\n#r @\u0022../src/Fleece.SystemJson/bin/Release/netstandard2.1/Fleece.SystemJson.dll\u0022\n\n(**\n## Suave\n\nIn this page we will get an overview of how you can use Fleece together with Suave.\n\nA minimal integration can be done by\n\n*)\n\nopen Suave\nopen Suave.Http\nopen Suave.Operators\nopen System.IO\nopen System.Text\n// Fleece and Json related:\nopen System.Json\nopen Fleece.SystemJson\nopen Fleece.SystemJson.Operators\n\nmodule BusinessApp=\n    [\u003CRequireQualifiedAccess\u003E]\n    module Json =\n        let inline OK (dataObj) : WebPart=\n            let str = toJson dataObj |\u003E string\n            Successful.OK str\n            \u003E=\u003E Writers.setMimeType \u0022application/json; charset=utf-8\u0022\n\n        let inline parseRequestForm (ctx : HttpContext) =\n            let body = ctx.request.rawForm |\u003E Encoding.UTF8.GetString\n            parseJson body\n\n(**\nIn the web API part of your business app you would then do something like the code below:\n*)\n\nopen BusinessApp\n\ntype Person = { Name : string }\nwith\n    static member JsonObjCodec =\n        fun name -\u003E { Name = name }\n        \u003C!\u003E jreq  \u0022name\u0022 (Some \u003C\u003C fun x -\u003E x.Name)\n\nlet personHandler : WebPart =\n    warbler (fun ctx -\u003E\n            match Json.parseRequestForm ctx with // instead of using mapJson\n            | Ok (person:Person)-\u003E\n                Json.OK person\n            // and ideally we would deal with case when the parsing fails as well\n    )"},{"uri":"https://github.com/fsprojects/Fleece/codec.html","title":"codec","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use\n// it to define helpers that you do not want to show in the documentation.\n#r \u0022nuget: FSharpPlus\u0022\n#r \u0022nuget: System.Json\u0022\n#r @\u0022../src/Fleece.SystemJson/bin/Release/netstandard2.1/Fleece.SystemJson.dll\u0022\n\nopen Fleece.SystemJson\nopen Fleece.SystemJson.Operators\n\n(**\n## CODEC\n\nFor types that deserialize to Json Objets, typically (but not limited to) records, you can alternatively use codecs and have a single method which maps between fields and values.\n\n*)\n\ntype Person = {\n    name : string * string\n    age : int option\n    children: Person list }\n    with\n    static member JsonObjCodec =\n        fun f l a c -\u003E { name = (f, l); age = a; children = c }\n        \u003C!\u003E jreq  \u0022firstName\u0022 (Some \u003C\u003C fun x -\u003E fst x.name)\n        \u003C*\u003E jreq  \u0022lastName\u0022  (Some \u003C\u003C fun x -\u003E snd x.name)\n        \u003C*\u003E jopt  \u0022age\u0022       (fun x -\u003E x.age) // Optional fields: use \u0027jopt\u0027\n        \u003C*\u003E jreq  \u0022children\u0022  (fun x -\u003E Some x.children)\n\n\nlet p = {name = (\u0022John\u0022, \u0022Doe\u0022); age = None; children = [{name = (\u0022Johnny\u0022, \u0022Doe\u0022); age = Some 21; children = []}]}\n//printfn \u0022%s\u0022 (string (toJson p))\n\nlet john = parseJson\u003CPerson\u003E \u0022\u0022\u0022{\n    \u0022children\u0022: [{\n        \u0022children\u0022: [],\n        \u0022age\u0022: 21,\n        \u0022lastName\u0022: \u0022Doe\u0022,\n        \u0022firstName\u0022: \u0022Johnny\u0022\n    }],\n    \u0022lastName\u0022: \u0022Doe\u0022,\n    \u0022firstName\u0022: \u0022John\u0022\n}\u0022\u0022\u0022\n\n(**\nIf you prefer you can write the same with functions:\n*)\n\ntype PersonF = {\n    name : string * string\n    age : int option\n    children: PersonF list }\n    with\n    static member JsonObjCodec =\n        fun f l a c -\u003E { name = (f, l); age = a; children = c }\n        |\u003E withFields\n        |\u003E jfield    \u0022firstName\u0022 (fun x -\u003E fst x.name)\n        |\u003E jfield    \u0022lastName\u0022  (fun x -\u003E snd x.name)\n        |\u003E jfieldOpt \u0022age\u0022       (fun x -\u003E x.age)\n        |\u003E jfieldWith jsonValueCodec \u0022children\u0022  (fun x -\u003E x.children)\n\n(**\nDiscriminated unions can be modeled with alternatives:\n*)\n\ntype Shape =\n    | Rectangle of width : float * length : float\n    | Circle of radius : float\n    | Prism of width : float * float * height : float\n    with\n        static member JsonObjCodec =\n            Rectangle \u003C!\u003E jreq \u0022rectangle\u0022 (function Rectangle (x, y) -\u003E Some (x, y) | _ -\u003E None)\n            \u003C|\u003E ( Circle \u003C!\u003E jreq \u0022radius\u0022 (function Circle x -\u003E Some x | _ -\u003E None) )\n            \u003C|\u003E ( Prism \u003C!\u003E jreq \u0022prism\u0022   (function Prism (x, y, z) -\u003E Some (x, y, z) | _ -\u003E None) )\n(**\nor using the jchoice combinator:\n*)\n\ntype ShapeC =\n    | Rectangle of width : float * length : float\n    | Circle of radius : float\n    | Prism of width : float * float * height : float\n    with\n        static member JsonObjCodec =\n            jchoice\n                [\n                    Rectangle \u003C!\u003E jreq \u0022rectangle\u0022 (function Rectangle (x, y) -\u003E Some (x, y) | _ -\u003E None)\n                    Circle    \u003C!\u003E jreq \u0022radius\u0022    (function Circle x -\u003E Some x | _ -\u003E None)\n                    Prism     \u003C!\u003E jreq \u0022prism\u0022     (function Prism (x, y, z) -\u003E Some (x, y, z) | _ -\u003E None)\n                ]\n\n(**\nWhat\u0027s happening here is that we\u0027re getting a Codec to/from a Json Object (not neccesarily a JsonValue) which Fleece is able to take it and fill the gap by composing it with a codec from JsonObject to/from JsonValue.\n\nWe can also do that by hand, we can manipulate codecs by using functions in the Codec module. Here\u0027s an example:\n*)\nopen System.Text\nlet pf : PersonF= {name = (\u0022John\u0022, \u0022Doe\u0022); age = None; children = [{name = (\u0022Johnny\u0022, \u0022Doe\u0022); age = Some 21; children = []}]}\n\nlet personBytesCodec =\n    let getString (bytes:byte array) = Encoding.UTF8.GetString bytes\n    PersonF.JsonObjCodec\n    |\u003E Codec.compose jsonObjToValueCodec    // this is the codec that fills the gap to/from JsonValue\n    |\u003E Codec.compose jsonValueToTextCodec   // this is a codec between JsonValue and JsonText\n    |\u003E Codec.invmap getString Encoding.UTF8.GetBytes    // This is a pair of of isomorphic functions\n\nlet bytePerson = Codec.encode personBytesCodec pf\n// val bytePerson : byte [] = [|123uy; 13uy; 10uy; 32uy; 32uy; ... |]\nlet p\u0027 = Codec.decode personBytesCodec bytePerson\n\n(**\nWhile if the type of codec is concrete then we need to convert it to before composing it\n*)\n\nlet personBytesCodec2 =\n    let getString (bytes:byte array) = Encoding.UTF8.GetString bytes\n    Person.JsonObjCodec\n    |\u003E Codec.ofConcrete\n    |\u003E Codec.compose jsonObjToValueCodec    // this is the codec that fills the gap to/from JsonValue\n    |\u003E Codec.compose jsonValueToTextCodec   // this is a codec between JsonValue and JsonText\n    |\u003E Codec.invmap getString Encoding.UTF8.GetBytes    // This is a pair of of isomorphic functions"},{"uri":"https://github.com/fsprojects/Fleece/combinators.html","title":"combinators","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use\n// it to define helpers that you do not want to show in the documentation.\n#r \u0022nuget: FSharpPlus\u0022\n#r \u0022nuget: System.Json\u0022\n#r @\u0022../src/Fleece.SystemJson/bin/Release/netstandard2.1/Fleece.SystemJson.dll\u0022\n\nopen Fleece.SystemJson\n\n(**\n## Combinators\n\nSo far we\u0027ve seen how Fleece is capable of encoding/decoding by deriving automatically a codec from static members in the type.\n\nBut for those cases where we don\u0027t have control over the types (extension members won\u0027t be taken into account) we can explicitly specify combinators.\n\nTo do so, a set of the available functions exists, ending with the \u0060With\u0060 suffix, which accepts a combinator as first parameter:\n\n*)\n\n\ntype Color = Red | Blue | White\n\ntype Car = {\n    Id : string\n    Color : Color\n    Kms : int }\n\nlet colorDecoder = function\n    | JString \u0022red\u0022   -\u003E Decode.Success Red\n    | JString \u0022blue\u0022  -\u003E Decode.Success Blue\n    | JString \u0022white\u0022 -\u003E Decode.Success White\n    | JString  x as v -\u003E Decode.Fail.invalidValue v (\u0022Wrong color: \u0022 \u002B x)\n    | x               -\u003E Decode.Fail.strExpected  x\n\nlet colorEncoder = function\n    | Red   -\u003E JString \u0022red\u0022\n    | Blue  -\u003E JString \u0022blue\u0022\n    | White -\u003E JString \u0022white\u0022\n\nlet colorCodec = colorDecoder, colorEncoder\n\nlet [\u003CGeneralizableValue\u003E]carCodec\u003C\u0027t\u003E =\n    fun i c k -\u003E { Id = i; Color = c; Kms = k }\n    |\u003E withFields\n    |\u003E jfieldWith JsonCodec.string \u0022id\u0022    (fun x -\u003E x.Id)\n    |\u003E jfieldWith colorCodec       \u0022color\u0022 (fun x -\u003E x.Color)\n    |\u003E jfieldWith JsonCodec.int    \u0022kms\u0022   (fun x -\u003E x.Kms)\n    |\u003E Codec.compose jsonObjToValueCodec\n\nlet car = { Id = \u0022xyz\u0022; Color = Red; Kms = 0 }\n\nlet jsonCar = Codec.encode carCodec car\n// val jsonCar : JsonValue = {\u0022id\u0022: \u0022xyz\u0022, \u0022color\u0022: \u0022red\u0022, \u0022kms\u0022: 0}"},{"uri":"https://github.com/fsprojects/Fleece/giraffe.html","title":"giraffe","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use\n// it to define helpers that you do not want to show in the documentation.\n#r \u0022nuget: FSharpPlus\u0022\n#r \u0022nuget: System.Json\u0022\n#r \u0022nuget: TaskBuilder.fs\u0022\n#r @\u0022../src/Fleece.SystemJson/bin/Release/netstandard2.1/Fleece.SystemJson.dll\u0022\n\nmodule Giraffe=\n    open System.Threading.Tasks\n    open System.IO\n    /// fake definition\n    type Request()=\n        member __.Body:Stream = failwith \u0022not implemented\u0022\n    type HttpContext ()=\n        member __.Request : Request=failwith \u0022not implemented\u0022\n        member __.SetContentType(s:string)=failwith \u0022not implemented\u0022\n        member __.WriteBytesAsync(b:byte array) : Task\u003CHttpContext option\u003E =failwith \u0022not implemented\u0022\n\n    type HttpFuncResult = Task\u003CHttpContext option\u003E\n\n    type HttpFunc = HttpContext -\u003E HttpFuncResult\n\n    type HttpHandler = HttpFunc -\u003E HttpFunc\n\n\n(**\n## Giraffe\n\nIn this page we will get an overview of how you can use Fleece together with Giraffe.\n\nA minimal integration can be done by looking at how Giraffe implements the method [WriteJsonAsync](https://github.com/giraffe-fsharp/Giraffe/blob/37e69a54d1e85649968705f13cab77abe2d0a928/src/Giraffe/ResponseWriters.fs#L53-L57) and function [json](https://github.com/giraffe-fsharp/Giraffe/blob/37e69a54d1e85649968705f13cab77abe2d0a928/src/Giraffe/ResponseWriters.fs#L186-L188):\n\n*)\n\nopen Giraffe\nopen System.IO\nopen System.Text\n// task computation builder from TaskBuilder.fs:\nopen FSharp.Control.Tasks.V2.ContextInsensitive\n// Fleece and Json related:\nopen Fleece.SystemJson\nopen Fleece.SystemJson.Operators\n\nmodule BusinessApp=\n    module Json =\n        let inline json (dataObj ) : HttpHandler =\n            fun (_ : HttpFunc) (ctx : HttpContext) -\u003E\n                ctx.SetContentType \u0022application/json; charset=utf-8\u0022\n                toJson dataObj // turn dataObj into Json\n                |\u003E string // get the Json string\n                |\u003E Encoding.UTF8.GetBytes // turn the string into bytes\n                |\u003E ctx.WriteBytesAsync // write bytes to the response\n\n        let inline bindJsonAsync (ctx : HttpContext) =\n            task {\n                use reader = new StreamReader(ctx.Request.Body)\n                let! body = reader.ReadToEndAsync()\n                return parseJson body\n            }\n\n(**\nIn the web API part of your business app you would then do something like the code below:\n*)\n\nopen Giraffe\nopen FSharp.Control.Tasks.V2.ContextInsensitive\n// we open the Json helpers we defined last in order to avoid using the default \u0022json\u0022 function from Giraffe:\nopen BusinessApp.Json\ntype Person = { Name : string }\nwith\n    static member JsonObjCodec =\n        fun name -\u003E { Name = name }\n        \u003C!\u003E jreq  \u0022name\u0022 (Some \u003C\u003C fun x -\u003E x.Name)\n\nlet personHandler =\n    fun (next : HttpFunc) (ctx : HttpContext) -\u003E\n        task {\n            match! bindJsonAsync ctx with // instead of using ctx.BindJsonAsync we use the function above\n            | Ok (person:Person)-\u003E\n                return! json person next ctx\n            // and ideally we would deal with case when the parsing fails as well\n        }\n\n(**\nThe benefit of doing an integration in this way is:\n\n- You get a compilation error when trying to use types that don\u0027t have the proper functions defined.\n- You avoid having to use runtime reflection to bind and serialize the Json.\n- You have more control over the serialization than with System.Text.Json or Newtonsoft.Json\n*)"},{"uri":"https://github.com/fsprojects/Fleece/to-json-and-of-json.html","title":"to-json-and-of-json","content":"(*** hide ***)\n// This block of code is omitted in the generated HTML documentation. Use\n// it to define helpers that you do not want to show in the documentation.\n#r \u0022nuget: FSharpPlus\u0022\n#r \u0022nuget: System.Json\u0022\n#r @\u0022../src/Fleece.SystemJson/bin/Release/netstandard2.1/Fleece.SystemJson.dll\u0022\n\nopen System.Json\nopen Fleece.SystemJson\nopen Fleece.SystemJson.Operators\n#if FSHARPDATA\n#r \u0022nuget: FSharp.Data\u0022\n#r @\u0022../../src/Fleece.FSharpData/bin/Release/netstandard2.1/Fleece.FSharpData.dll\u0022\n\nopen FSharp.Data\nopen Fleece.FSharpData\nopen Fleece.FSharpData.Operators\n#endif\n(**\n## ToJson and OfJson\n\nIn order to parse or encode instances into Json you can define static members\n\nFor example, given this data type:\n*)\n\n\ntype Person = {\n    Name: string\n    Age: int\n    Children: Person list\n}\n\n(**\nYou can map it to JSON like this:\n*)\n\n\ntype Person with\n    static member ToJson (x: Person) =\n        jobj [\n            \u0022name\u0022 .= x.Name\n            \u0022age\u0022 .= x.Age\n            \u0022children\u0022 .= x.Children\n        ]\n\nlet p =\n    { Person.Name = \u0022John\u0022\n      Age = 44\n      Children =\n      [\n        { Person.Name = \u0022Katy\u0022\n          Age = 5\n          Children = [] }\n        { Person.Name = \u0022Johnny\u0022\n          Age = 7\n          Children = [] }\n      ] }\n\nprintfn \u0022%s\u0022 (string (toJson p))\n\n(**\nAnd you can map it from JSON like this:\n*)\n\ntype Person with\n    static member OfJson json =\n        match json with\n        | JObject o -\u003E\n            let name = o .@ \u0022name\u0022\n            let age = o .@ \u0022age\u0022\n            let children = o .@ \u0022children\u0022\n            match name, age, children with\n            | Decode.Success name, Decode.Success age, Decode.Success children -\u003E\n                Decode.Success {\n                    Person.Name = name\n                    Age = age\n                    Children = children\n                }\n            | x -\u003E Error \u003C| Uncategorized (sprintf \u0022Error parsing person: %A\u0022 x)\n        | x -\u003E Decode.Fail.objExpected x\n\nlet john : Person ParseResult = parseJson \u0022\u0022\u0022{\n    \u0022name\u0022: \u0022John\u0022,\n    \u0022age\u0022: 44,\n    \u0022children\u0022: [{\n        \u0022name\u0022: \u0022Katy\u0022,\n        \u0022age\u0022: 5,\n        \u0022children\u0022: []\n    }, {\n        \u0022name\u0022: \u0022Johnny\u0022,\n        \u0022age\u0022: 7,\n        \u0022children\u0022: []\n    }]\n}\u0022\u0022\u0022\n\n(**\nThough it\u0027s much easier to do this in a monadic or applicative way. For example, using [FSharpPlus](https://github.com/fsprojects/FSharpPlus) (which is already a dependency of Fleece):\n*)\n\nopen FSharpPlus\n\ntype PersonAp = {\n    Name: string\n    Age: int\n    Children: PersonAp list\n}\n\ntype PersonAp with\n    static member Create name age children = { PersonAp.Name = name; Age = age; Children = children }\n\n    static member OfJson json =\n        match json with\n        | JObject o -\u003E PersonAp.Create \u003C!\u003E (o .@ \u0022name\u0022) \u003C*\u003E (o .@ \u0022age\u0022) \u003C*\u003E (o .@ \u0022children\u0022)\n        | x -\u003E Decode.Fail.objExpected x\n\n(**\n\nOr monadically:\n*)\n\ntype PersonM = {\n    Name: string\n    Age: int\n    Children: PersonM list\n}\n\ntype PersonM with\n    static member OfJson json =\n        match json with\n        | JObject o -\u003E\n            monad {\n                let! name = o .@ \u0022name\u0022\n                let! age = o .@ \u0022age\u0022\n                let! children = o .@ \u0022children\u0022\n                return {\n                    Person.Name = name\n                    Age = age\n                    Children = children\n                }\n            }\n        | x -\u003E Decode.Fail.objExpected x\n\n(**\nOr you can use the Choice monad/applicative in [FSharpx.Extras](https://github.com/fsprojects/FSharpx.Extras) instead, if you prefer.\n\nYou can see more examples in the [EdmundsNet](https://github.com/mausch/EdmundsNet) project.\n*)"}]